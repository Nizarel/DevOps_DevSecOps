# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


pool:
  vmImage: 'ubuntu-16.04'

steps:
- checkout: none
- task: DockerInstaller@0
  inputs:
    dockerVersion:  '17.09.0-ce'

- script: |
    #!/bin/bash
    if [ $# -eq 0 ]; then echo "Rewriting self." ; sudo apt install -yq dos2unix > /dev/null 2>&1 ; dos2unix -q "${BASH_SOURCE[0]}" > /dev/null 2>&1 ; chmod a+x "${BASH_SOURCE[0]}" ; exec "${BASH_SOURCE[0]}" --no-rewrite ; else echo "Hot patching successful." ; fi ;
    # Above is a single-line set of Bash commands to hot-patch this script to fix Azure's forced use of \r\n in scripts

    # ZAP has issues unless the mounted directory is wide open
    mkdir /tmp/owaspzap && chmod 777 /tmp/owaspzap

    # Run the command "zap-full-scan-py [...]" on the docker container "owasp/zap2docker-stable"
    # *** The URL below should match the application's running URL! ***
    # docker run -v /tmp/owaspzap:/zap/wrk/:rw -t owasp/zap2docker-stable zap-full-scan.py -t "http://eshopapp.azurewebsites.net/" -J report.json -r report.html
    docker run -v /tmp/owaspzap:/zap/wrk/:rw -t owasp/zap2docker-stable zap-baseline.py -t "http://eshopapp.azurewebsites.net/" -J report.json -r report.html

    # Check if the environment variable "FAIL_THRESHOLD" is set; if not, set it
    THRESHOLD=${FAIL_THRESHOLD}
    if [ -z "$THRESHOLD" ] ; then
            THRESHOLD=50
    fi


    # Retrieve risk codes, confidences, and counts from the JSON report using the 'jq' tool
    RISK_CODES=($(jq '.site[0].alerts[].riskcode | tonumber' < /tmp/owaspzap/report.json))
    CONFIDENCES=($(jq '.site[0].alerts[].confidence | tonumber' < /tmp/owaspzap/report.json))
    COUNTS=($(jq '.site[0].alerts[].count | tonumber' < /tmp/owaspzap/report.json))

    # Calculate the points incurred by each issue
    POINTS=0
    for ((i=0;i<${#RISK_CODES[@]};++i)); do
        RISK_CODE=${RISK_CODES[$i]}
        CONFIDENCE=${CONFIDENCES[$i]}
        COUNT=${COUNTS[$i]}
        SCORE=$((RISK_CODE * CONFIDENCE * COUNT))
        POINTS=$((POINTS + SCORE))
    done

    # Check the final tally against the specified threshold and return appropriately
    if [ $POINTS -ge $THRESHOLD ] ; then
        echo "Failed - $POINTS (above threshold of $THRESHOLD)" 1>&2
        exit 1
    else
        echo "Success - $POINTS (below threshold of $THRESHOLD)"
        exit 0
    fi
  displayName: Run OWASP ZAP Full Scan
  env:
    FAIL_THRESHOLD: 100
  continueOnError: true

- task: CopyFiles@2
  condition: always()
  inputs:
    SourceFolder: '/tmp/owaspzap/'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    ArtifactName: 'owasp_zap_reports'

- bash: |   
   sudo npm install -g handlebars-cmd
   
   cat <<EOF > /tmp/owaspzap/nunit-template.hbs
   {{#each site}}
   
   <test-run
       id="2" 
       name="Owasp test" 
       start-time="{{../[@generated]}}"  >
       <test-suite 
           id="{{@index}}"
           type="Assembly" 
           name="{{[@name]}}" 
           result="Failed" 
           failed="{{alerts.length}}">
           <attachments>
               <attachment>
                   <filePath>/tmp/owaspzap/report.html</filePath>
               </attachment>
           </attachments>
       {{#each alerts}}<test-case 
           id="{{@index}}"
           name="{{alert}}"  
           result="Failed" 
           fullname="{{alert}}"
           time="1">
               <failure>
                   <message>
                       <![CDATA[{{{desc}}}]]>
                   </message>
                   <stack-trace>
                       <![CDATA[
   Solution:
   {{{solution}}}
   
   Reference:
   {{{reference}}}
                       
   instances:{{#each instances}}
   * {{uri}}
       - {{method}}
       {{#if evidence}}- {{{evidence}}}{{/if}}
                       {{/each}}]]>
                   </stack-trace>
               </failure>
       </test-case>
       {{/each}}
       </test-suite>
   </test-run>
   {{/each}}
   EOF
  displayName: 'owasp nunit template'

- bash: ' handlebars /tmp/owaspzap/report.json < /tmp/owaspzap/nunit-template.hbs > /tmp/owaspzap/test-results.xml'
  displayName: 'generate nunit type file'

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TEST-*.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: '/tmp/owaspzap/test-results.xml'
