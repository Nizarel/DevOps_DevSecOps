# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
pr: master

pool:
  vmImage: 'ubuntu-16.04'

variables:
  pathToDockerFile: '.'
  imageName: 'YOUR_IMAGE_NAME'
  ACRConnectionName: 'YOUR_ACR_CONNECTION_NAME'
  ACRLoginServer: 'YOUR_ACR_LOGIN_SERVER'

steps:
- checkout: none
- task: DockerInstaller@0
  inputs:
    dockerVersion:  '19.03.4'

## During the CI/CD process and additional docker build step could be added here.
- task: CmdLine@2
  inputs:
    script: |
      docker build $(pathToDockerFile) -t $(imageName):$(Build.BuildId)

- bash: 'docker run -d -p <EXPOSED_HOST_PORT>:<EXPOSED_CONTAINER_PORT> $(imageName):$(Build.BuildId)'
  displayName: 'Run app in docker container'

- task: owaspzap@0
  displayName: 'ZAP Scanner'
  inputs:
    aggressivemode: false
    scantype: 'agentScan'
    threshold: 20
    provideCustomContext: false
    port: 5000


- task: CopyFiles@2
  condition: always()
  inputs:
    SourceFolder: 'owaspzap/'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  condition: always()
  inputs:
    ArtifactName: 'owasp_zap_reports'

- bash: |
   sudo npm install -g handlebars-cmd

   cat <<EOF > owaspzap/nunit-template.hbs
   {{#each site}}

   <test-run
       id="2"
       name="Owasp test"
       start-time="{{../[@generated]}}"  >
       <test-suite
           id="{{@index}}"
           type="Assembly"
           name="{{[@name]}}"
           result="Failed"
           failed="{{alerts.length}}">
           <attachments>
               <attachment>
                   <filePath>$(Build.ArtifactStagingDirectory)/report.html</filePath>
               </attachment>
               <attachment>
                   <filePath>$(Build.ArtifactStagingDirectory)/report.json</filePath>
                </attachment>
           </attachments>
       {{#each alerts}}<test-case
           id="{{@index}}"
           name="{{alert}}"
           result="Failed"
           fullname="{{alert}}"
           time="1">
               <failure>
                   <message>
                       <![CDATA[{{{desc}}}]]>
                   </message>
                   <stack-trace>
                       <![CDATA[
   Solution:
   {{{solution}}}

   Reference:
   {{{reference}}}

   instances:{{#each instances}}
   * {{uri}}
       - {{method}}
       {{#if evidence}}- {{{evidence}}}{{/if}}
                       {{/each}}]]>
                   </stack-trace>
               </failure>
       </test-case>
       {{/each}}
       </test-suite>
   </test-run>
   {{/each}}
   EOF
  displayName: 'owasp nunit template'
  condition: always()

- bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
  displayName: 'generate nunit type file'
  condition: always()

- task: PublishTestResults@2
  displayName: 'Publish Test Results **/TEST-*.xml'
  inputs:
    testResultsFormat: NUnit
    testResultsFiles: 'owaspzap/test-results.xml'
  condition: always()
