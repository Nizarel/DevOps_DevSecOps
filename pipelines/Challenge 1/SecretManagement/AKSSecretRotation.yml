trigger:
- none

pool:
  vvmImage: 'ubuntu-latest'
  
variables:
  Namespace: 'default'
  StorageAccount: 'YOURSTORAGEACCOUNTNAME'
  ResourceGroup: 'YOURRESOURCeGROUPNAME'
  ConnectionStringKeyVaultSecret: 'storageConnectionString'
  KeyVaultName: 'YOURKEYVAULTNAME'
  ConfigMapName: 'current-storage-key'
  SubscriptionServiceEndpoint: 'YOURAZURESUBSCRIPTION'
  KubernetesName: 'YOURKUBERNETESSERVICENAME'
  KubernetesServiceConnection: 'YOURKUBERNETESSERVICECONNECTIONNAME'
  KubernetesDeployment: 'deployment/storage-viewer-deployment'

steps:
- task: KubectlInstaller@0
  displayName: 'Install Kubectl latest'
- task: AzureCLI@1
  displayName: 'Rotate a storage key and upload to KeyVault'
  inputs:
    azureSubscription: '$(SubscriptionServiceEndpoint)'
    scriptLocation: inlineScript
    inlineScript: |
     
     # download the kubernetes secrets
     az aks get-credentials --name $(KubernetesName) --resource-group $(ResourceGroup)

     currentKeyId=$(kubectl get configmap $(ConfigMapName) -n $(Namespace) -o json | jq '.data.CurrentAccountKeyId' | sed s/\"//g)
     
     keyName="secondary"
     if [ "$currentKeyId" == "secondary" ]; then
         echo "regenerating primary key"
         keyName="primary"
     else 
        echo "regenerating secondary key"
     fi
     
     # regen the key
     az storage account keys renew --account-name $(StorageAccount) --key $keyName -g $(ResourceGroup)
     
     # update the secret in key vault
     echo "updating the secret in keyvault"
     
     # show connection string
     connectionString=$(az storage account show-connection-string -n $(StorageAccount) -g $(ResourceGroup) --key $keyName | jq '.connectionString')
     
     # update the key vault 
     az keyvault secret set -n $(ConnectionStringKeyVaultSecret) --value $connectionString --vault-name $(KeyVaultName)
     
     echo "Setting the pipeline variable with $keyName"

     echo "##vso[task.setvariable variable=NewStorageAccountKeyName;]$keyName"
- bash: |
    echo "Keyname is $(NewStorageAccountKeyName)"

    cat <<EOF > configmap.yml
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: $(ConfigMapName)
      namespace: $(Namespace)
    data:
      CurrentAccountKeyId: $(NewStorageAccountKeyName)
    EOF

    cat configmap.yml
  displayName: Create configMap yaml file
- task: Kubernetes@1
  displayName: "kubectl create configmap"
  inputs: 
    namespace: $(Namespace)
    kubernetesServiceEndpoint: $(KubernetesServiceConnection)
    command: apply
    arguments: -f configmap.yml --record
- task: Kubernetes@1
  displayName: 'kubectl rollout restart'
  inputs:
    kubernetesServiceEndpoint: $(KubernetesServiceConnection)
    namespace: $(Namespace)
    command: rollout
    arguments: 'restart $(KubernetesDeployment)'
- task: Kubernetes@1
  displayName: 'kubectl rollout status'
  inputs:
    kubernetesServiceEndpoint: $(KubernetesServiceConnection)
    namespace: $(Namespace)
    command: rollout
    arguments: 'status $(KubernetesDeployment)'
    checkLatest: true

